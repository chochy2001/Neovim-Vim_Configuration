-- Script para configurar autom√°ticamente Warp Terminal con Nerd Font
-- Ejecutar con: :luafile ~/.config/nvim/lua/configure-warp-font.lua

print("üéØ CONFIGURANDO WARP TERMINAL AUTOM√ÅTICAMENTE")
print("=" .. string.rep("=", 45))

-- Funci√≥n para detectar Warp Terminal
local function detect_warp()
    local term = os.getenv("TERM_PROGRAM")
    local is_warp = term == "WarpTerminal"

    print("\nüîç Detecci√≥n de terminal:")
    print("  TERM_PROGRAM:", term or "no detectado")
    print("  Es Warp:", is_warp and "‚úÖ" or "‚ùå")

    return is_warp
end

-- Funci√≥n para verificar si FiraCode Nerd Font est√° instalada
local function check_nerd_font()
    print("\nüìä Verificando instalaci√≥n de FiraCode Nerd Font...")

    -- Verificar archivos de fuente en macOS
    local font_paths = {
        os.getenv("HOME") .. "/Library/Fonts/FiraCodeNerdFont-Regular.ttf",
        os.getenv("HOME") .. "/Library/Fonts/FiraCodeNerdFontMono-Regular.ttf",
        "/System/Library/Fonts/Supplemental/FiraCodeNerdFont-Regular.ttf"
    }

    local font_found = false
    for _, path in ipairs(font_paths) do
        local file = io.open(path, "r")
        if file then
            file:close()
            print("  ‚úÖ Encontrada:", path)
            font_found = true
            break
        end
    end

    if not font_found then
        print("  ‚ùå FiraCode Nerd Font no encontrada en rutas est√°ndar")

        -- Intentar verificar con sistema
        local handle = io.popen("fc-list | grep -i 'firacode.*nerd' | head -1")
        if handle then
            local result = handle:read("*a")
            handle:close()

            if result and result:match("%S") then
                print("  ‚úÖ Detectada por fc-list:", result:gsub("\n", ""))
                font_found = true
            end
        end
    end

    return font_found
end

-- Funci√≥n para generar configuraci√≥n de Warp
local function generate_warp_config()
    print("\n‚öôÔ∏è Generando configuraci√≥n para Warp...")

    local config_dir = os.getenv("HOME") .. "/.warp"
    local settings_file = config_dir .. "/user_preferences.json"

    -- Crear directorio si no existe
    os.execute("mkdir -p " .. config_dir)

    -- Configuraci√≥n JSON para Warp
    local warp_config = {
        theme = {
            name = "Default",
        },
        editor = {
            font_family = "FiraCode Nerd Font",
            font_size = 14,
        },
        terminal = {
            font_family = "FiraCode Nerd Font",
            font_size = 14,
        }
    }

    -- Convertir a JSON simple
    local json_config = [=[{
  "theme": {
    "name": "Default"
  },
  "editor": {
    "font_family": "FiraCode Nerd Font",
    "font_size": 14
  },
  "terminal": {
    "font_family": "FiraCode Nerd Font",
    "font_size": 14
  }
}]=]

    -- Escribir configuraci√≥n
    local file = io.open(settings_file, "w")
    if file then
        file:write(json_config)
        file:close()
        print("  ‚úÖ Configuraci√≥n guardada en:", settings_file)
        return true
    else
        print("  ‚ùå No se pudo escribir configuraci√≥n en:", settings_file)
        return false
    end
end

-- Funci√≥n para probar iconos Nerd Font
local function test_nerd_font_icons()
    print("\nüß™ PROBANDO ICONOS NERD FONT:")
    print("Si configuraste la fuente correctamente, deber√≠as ver iconos en lugar de s√≠mbolos raros:")

    local test_icons = {
        { icon = "", desc = "Carpeta cerrada" },
        { icon = "", desc = "Carpeta abierta" },
        { icon = "", desc = "Archivo gen√©rico" },
        { icon = "Û∞Ç∫", desc = "README.md" },
        { icon = "Û∞ò¶", desc = "YAML" },
        { icon = "Û∞å†", desc = "Dart" },
        { icon = "Û∞üÜ", desc = "Shell script" },
        { icon = "Û∞àô", desc = "JSON" },
        { icon = "Û∞å±", desc = "Log file" },
        { icon = "Û∞ôÖ", desc = "C/C++" },
    }

    for i, item in ipairs(test_icons) do
        print(string.format("  %2d. %s  ‚Üê %s", i, item.icon, item.desc))
    end
end

-- Funci√≥n principal
local function configure_warp_automatically()
    local is_warp = detect_warp()
    local font_installed = check_nerd_font()

    if not font_installed then
        print("\n‚ùå FiraCode Nerd Font no est√° instalada.")
        print("üì¶ Instal√°ndola autom√°ticamente con Homebrew...")

        local install_result = os.execute("brew install --cask font-fira-code-nerd-font 2>/dev/null")
        if install_result == 0 then
            print("‚úÖ FiraCode Nerd Font instalada correctamente")
            font_installed = true
        else
            print("‚ùå Error instalando la fuente. Inst√°lala manualmente:")
            print("   brew install --cask font-fira-code-nerd-font")
        end
    end

    if is_warp and font_installed then
        print("\nüéØ Configurando Warp autom√°ticamente...")
        local config_success = generate_warp_config()

        if config_success then
            print("\n‚úÖ ¬°CONFIGURACI√ìN AUTOM√ÅTICA COMPLETADA!")
            print("\nüìã PASOS FINALES:")
            print("1. Reinicia Warp Terminal COMPLETAMENTE")
            print("2. La fuente ya deber√≠a estar configurada autom√°ticamente")
            print("3. Abre nvim y ejecuta <leader>pv")
            print("4. Los iconos deber√≠an aparecer perfectamente")
        end
    elseif is_warp then
        print("\n‚ö†Ô∏è  Fuente no disponible. Configuraci√≥n manual requerida.")
    else
        print("\nüí° INSTRUCCIONES MANUALES:")
        print("Tu terminal no es Warp. Para configurar la fuente:")
        print("1. Abre la configuraci√≥n de tu terminal")
        print("2. Busca la opci√≥n de 'Font' o 'Fuente'")
        print("3. Selecciona 'FiraCode Nerd Font'")
        print("4. Tama√±o recomendado: 14pt")
        print("5. Reinicia el terminal")
    end

    test_nerd_font_icons()
end

-- Crear comando permanente
vim.api.nvim_create_user_command("ConfigureWarpFont", function()
    configure_warp_automatically()
end, { desc = "Automatically configure Warp Terminal with Nerd Font" })

-- Ejecutar configuraci√≥n
configure_warp_automatically()

print("\nüí° Comando creado: :ConfigureWarpFont")