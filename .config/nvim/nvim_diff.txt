diff --git a/.config/nvim/lazy-lock.json b/.config/nvim/lazy-lock.json
index 3aae27d..37822f1 100644
--- a/.config/nvim/lazy-lock.json
+++ b/.config/nvim/lazy-lock.json
@@ -3,8 +3,10 @@
   "catppuccin": { "branch": "main", "commit": "5b5e3aef9ad7af84f463d17b5479f06b87d5c429" },
   "cmp-nvim-lsp": { "branch": "main", "commit": "a8912b88ce488f411177fc8aed358b04dc246d7b" },
   "cmp_luasnip": { "branch": "master", "commit": "98d9cb5c2c38532bd9bdb481067b20fea8f32e90" },
-  "friendly-snippets": { "branch": "main", "commit": "16833311a0c51e7ee9a1ce939000f5b20a5d9d2b" },
+  "dashboard-nvim": { "branch": "master", "commit": "000448d837f6e7a47f8f342f29526c4d7e49e9ce" },
+  "friendly-snippets": { "branch": "main", "commit": "bedf8a06104a657678adec524b67be6806d2fead" },
   "gitsigns.nvim": { "branch": "main", "commit": "02eafb1273afec94447f66d1a43fc5e477c2ab8a" },
+  "harpoon": { "branch": "harpoon2", "commit": "ed1f853847ffd04b2b61c314865665e1dadf22c7" },
   "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
   "mason-lspconfig.nvim": { "branch": "main", "commit": "1a31f824b9cd5bc6f342fc29e9a53b60d74af245" },
   "mason.nvim": { "branch": "main", "commit": "fc98833b6da5de5a9c5b1446ac541577059555be" },
@@ -21,7 +23,10 @@
   "swagger-preview.nvim": { "branch": "master", "commit": "9b9bc21096890a1bd0f221a940d04dbab87a38aa" },
   "telescope-ui-select.nvim": { "branch": "master", "commit": "6e51d7da30bd139a6950adf2a47fda6df9fa06d2" },
   "telescope.nvim": { "branch": "master", "commit": "d90956833d7c27e73c621a61f20b29fdb7122709" },
+  "toggleterm.nvim": { "branch": "main", "commit": "50ea089fc548917cc3cc16b46a8211833b9e3c7c" },
+  "undotree": { "branch": "master", "commit": "b951b87b46c34356d44aa71886aecf9dd7f5788a" },
   "vim-fugitive": { "branch": "master", "commit": "4a745ea72fa93bb15dd077109afbb3d1809383f2" },
   "vim-test": { "branch": "master", "commit": "b0c3e13249699a522c8b472ff79eff40d2935476" },
-  "vimux": { "branch": "master", "commit": "7db6b2f79d432ee3820668b1d4625311dbe1d0ad" }
+  "vimux": { "branch": "master", "commit": "7db6b2f79d432ee3820668b1d4625311dbe1d0ad" },
+  "which-key.nvim": { "branch": "main", "commit": "370ec46f710e058c9c1646273e6b225acf47cbed" }
 }
diff --git a/.config/nvim/lua/plugins/catppuccin.lua b/.config/nvim/lua/plugins/catppuccin.lua
index 988b00f..c1d0ef2 100644
--- a/.config/nvim/lua/plugins/catppuccin.lua
+++ b/.config/nvim/lua/plugins/catppuccin.lua
@@ -1,11 +1,11 @@
 return {
-  {
-    "catppuccin/nvim",
-    lazy = false,
-    name = "catppuccin",
-    priority = 1000,
-    config = function()
-      vim.cmd.colorscheme "catppuccin-mocha"
-    end
-  }
+    {
+        "catppuccin/nvim",
+        lazy = false,
+        name = "catppuccin",
+        priority = 1000,
+        config = function()
+            vim.cmd.colorscheme("catppuccin-mocha")
+        end,
+    },
 }
diff --git a/.config/nvim/lua/plugins/completions.lua b/.config/nvim/lua/plugins/completions.lua
index 1ca038f..30ace16 100644
--- a/.config/nvim/lua/plugins/completions.lua
+++ b/.config/nvim/lua/plugins/completions.lua
@@ -1,44 +1,48 @@
 return {
-	{
-		"hrsh7th/cmp-nvim-lsp",
-	},
-	{
-		"L3MON4D3/LuaSnip",
-		dependencies = {
-			"saadparwaiz1/cmp_luasnip",
-			"rafamadriz/friendly-snippets",
-		},
-	},
-	{
-		"hrsh7th/nvim-cmp",
-		config = function()
-			local cmp = require("cmp")
-			require("luasnip.loaders.from_vscode").lazy_load()
+    {
+        "hrsh7th/cmp-nvim-lsp",
+    },
+    {
+        "L3MON4D3/LuaSnip",
+        dependencies = {
+            "saadparwaiz1/cmp_luasnip",
+            "rafamadriz/friendly-snippets",
+        },
+    },
+    {
+        "hrsh7th/nvim-cmp",
+        -- Aseg√∫rate que las dependencias se listan antes o aqu√≠
+        dependencies = { "hrsh7th/cmp-nvim-lsp", "L3MON4D3/LuaSnip", "saadparwaiz1/cmp_luasnip" },
+        config = function()
+            local cmp = require("cmp")
+            -- Carga snippets amigables
+            require("luasnip.loaders.from_vscode").lazy_load()
 
-			cmp.setup({
-				snippet = {
-					expand = function(args)
-						require("luasnip").lsp_expand(args.body)
-					end,
-				},
-				window = {
-					completion = cmp.config.window.bordered(),
-					documentation = cmp.config.window.bordered(),
-				},
-				mapping = cmp.mapping.preset.insert({
-					["<C-b>"] = cmp.mapping.scroll_docs(-4),
-					["<C-f>"] = cmp.mapping.scroll_docs(4),
-					["<C-Space>"] = cmp.mapping.complete(),
-					["<C-e>"] = cmp.mapping.abort(),
-					["<CR>"] = cmp.mapping.confirm({ select = true }),
-				}),
-				sources = cmp.config.sources({
-					{ name = "nvim_lsp" },
-					{ name = "luasnip" }, -- For luasnip users.
-				}, {
-					{ name = "buffer" },
-				}),
-			})
-		end,
-	},
+            cmp.setup({
+                snippet = {
+                    expand = function(args)
+                        require("luasnip").lsp_expand(args.body) -- Usa LuaSnip para expandir snippets
+                    end,
+                },
+                window = {
+                    completion = cmp.config.window.bordered(),
+                    documentation = cmp.config.window.bordered(),
+                },
+                mapping = cmp.mapping.preset.insert({
+                    ["<C-b>"] = cmp.mapping.scroll_docs(-4),
+                    ["<C-f>"] = cmp.mapping.scroll_docs(4),
+                    ["<C-Space>"] = cmp.mapping.complete(),
+                    ["<C-e>"] = cmp.mapping.abort(),
+                    ["<CR>"] = cmp.mapping.confirm({ select = true }), -- Confirma selecci√≥n al presionar Enter
+                }),
+                -- Fuentes para autocompletado
+                sources = cmp.config.sources({
+                    { name = "nvim_lsp" }, -- Sugerencias del LSP
+                    { name = "luasnip" }, -- Sugerencias de Snippets
+                }, {
+                    { name = "buffer" }, -- Sugerencias del buffer actual
+                }),
+            })
+        end,
+    },
 }
diff --git a/.config/nvim/lua/plugins/dashboard.lua b/.config/nvim/lua/plugins/dashboard.lua
index 3941af5..2f3d198 100644
--- a/.config/nvim/lua/plugins/dashboard.lua
+++ b/.config/nvim/lua/plugins/dashboard.lua
@@ -1 +1,64 @@
-return {}
\ No newline at end of file
+return {
+  {
+    "glepnir/dashboard-nvim",
+    event = "VimEnter", -- Carga el dashboard cuando Neovim se inicia
+    dependencies = { "nvim-tree/nvim-web-devicons" }, -- Necesita devicons para los iconos
+    config = function()
+      local dashboard = require("dashboard")
+      dashboard.setup({
+        -- Tu configuraci√≥n de tema y contenido se mantiene igual
+        theme = "doom",
+        config = {
+          header = {
+			[[  ______                             __                      __           ]],
+			[[ /      \                           |  \                    |  \          ]],
+			[[|  $$$$$$\  ______    ______    ____| $$  ______    _______  \$$  _______ ]],
+			[[| $$   \$$ |      \  /      \  /      $$ /      \  /       \|  \ /       \]],
+			[[| $$        \$$$$$$\|  $$$$$$\|  $$$$$$$|  $$$$$$\|  $$$$$$$| $$|  $$$$$$$]],
+			[[| $$   __  /      $$| $$  | $$| $$  | $$| $$    $$ \$$    \ | $$ \$$    \ ]],
+			[[| $$__/  \|  $$$$$$$| $$__/ $$| $$__| $$| $$$$$$$$ _\$$$$$$\| $$ _\$$$$$$\ ]],
+			[[ \$$    $$ \$$    $$| $$    $$ \$$    $$ \$$     \|       $$| $$|       $$]],
+			[[  \$$$$$$   \$$$$$$$| $$$$$$$   \$$$$$$$  \$$$$$$$ \$$$$$$$  \$$ \$$$$$$$ ]],
+			[[                    | $$                                                  ]],
+			[[                    | $$                                                  ]],
+			[[                     \$$                                                  ]],
+		},
+          center = {
+            -- Ajusta la acci√≥n para 'Plugin Sync' si usas lazy.nvim
+            { icon = "1Ô∏è‚É£ ", desc = " Find File             ", action = "Telescope find_files" },
+            { icon = "2Ô∏è‚É£ ", desc = " Find Word             ", action = "Telescope live_grep" },
+            { icon = "3Ô∏è‚É£ ", desc = " Recent Files          ", action = "Telescope oldfiles" },
+            { icon = "4Ô∏è‚É£ ", desc = " File Explorer         ", action = "Neotree toggle" },
+            { icon = "5Ô∏è‚É£ ", desc = " Toggle Terminal       ", action = "ToggleTerm" },
+            { icon = "6Ô∏è‚É£ ", desc = " Edit Config           ", action = "edit ~/.config/nvim/lua/plugins.lua" }, -- Aseg√∫rate que esta ruta sea correcta para tu config de lazy
+            { icon = "7Ô∏è‚É£ ", desc = " Plugin Sync (Lazy)    ", action = "Lazy sync" }, -- Cambiado de PackerSync a Lazy sync
+            { icon = "8Ô∏è‚É£ ", desc = " LSP Installer (Mason) ", action = "Mason" },
+          },
+          footer = { "üöÄ  Que el c√≥digo te acompa√±e, Chochy üß†" },
+        },
+      })
+
+      -- El autocmd para los keymaps debe definirse DESPU√âS de llamar a setup
+      -- o dentro de la funci√≥n config, pero fuera de la tabla de setup.
+      vim.api.nvim_create_autocmd("FileType", {
+        pattern = "dashboard",
+        callback = function()
+          local map = vim.api.nvim_buf_set_keymap
+          local opts = { noremap = true, silent = true, nowait = true }
+
+          -- Mismos mapeos que ten√≠as
+          map(0, "n", "1", ":Telescope find_files<CR>", opts)
+          map(0, "n", "2", ":Telescope live_grep<CR>", opts)
+          map(0, "n", "3", ":Telescope oldfiles<CR>", opts)
+          map(0, "n", "4", ":Neotree toggle<CR>", opts)
+          map(0, "n", "5", ":ToggleTerm<CR>", opts)
+          map(0, "n", "6", ":edit ~/.config/nvim/lua/plugins.lua<CR>", opts) -- Verifica esta ruta
+          map(0, "n", "7", ":Lazy sync<CR>", opts) -- Cambiado de PackerSync
+          map(0, "n", "8", ":Mason<CR>", opts)
+        end,
+      })
+    end,
+  },
+
+
+} 
diff --git a/.config/nvim/lua/plugins/git-stuff.lua b/.config/nvim/lua/plugins/git-stuff.lua
index e96dfcc..644a36f 100644
--- a/.config/nvim/lua/plugins/git-stuff.lua
+++ b/.config/nvim/lua/plugins/git-stuff.lua
@@ -1,14 +1,36 @@
 return {
-	{
-		"tpope/vim-fugitive",
-	},
-	{
-		"lewis6991/gitsigns.nvim",
-		config = function()
-			require("gitsigns").setup()
+    {
+        "tpope/vim-fugitive",
+    },
+    {
+        "lewis6991/gitsigns.nvim",
+        config = function()
+            require("gitsigns").setup()
 
-			vim.keymap.set("n", "<leader>gp", ":Gitsigns preview_hunk<CR>", {})
-			vim.keymap.set("n", "<leader>gt", ":Gitsigns toggle_current_line_blame<CR>", {})
-		end,
-	},
+            vim.keymap.set("n", "<leader>gp", ":Gitsigns preview_hunk<CR>", {})
+            vim.keymap.set("n", "<leader>gt", ":Gitsigns toggle_current_line_blame<CR>", {})
+        end,
+    },
+    -- Dependencia para Neogit
+  { "sindrets/diffview.nvim", cmd = { "DiffviewOpen", "DiffviewClose", "DiffviewToggleFiles", "DiffviewFocusFiles" } },
+  -- Interfaz de Git tipo Magit
+  {
+    "NeogitOrg/neogit",
+    dependencies = {
+      "nvim-lua/plenary.nvim",
+      "sindrets/diffview.nvim",
+      "nvim-telescope/telescope.nvim", -- Opcional, para selectores
+    },
+    cmd = "Neogit", -- Cargar al usar el comando
+    config = function()
+      require("neogit").setup({
+        integrations = {
+          telescope = true, -- Activar si usas telescope
+          diffview = true, -- Activar integraci√≥n con diffview
+        },
+        -- ... otras configuraciones de Neogit ...
+      })
+       vim.keymap.set("n", "<leader>gg", ":Neogit<CR>", { desc = "Open Neogit" })
+    end,
+  },
 }
diff --git a/.config/nvim/lua/plugins/gitsigns.lua b/.config/nvim/lua/plugins/gitsigns.lua
deleted file mode 100644
index 1633cd1..0000000
--- a/.config/nvim/lua/plugins/gitsigns.lua
+++ /dev/null
@@ -1,11 +0,0 @@
-return {
-	{
-		"tpope/vim-fugitive",
-	},
-	{
-		"lewis6991/gitsigns.nvim",
-		config = function()
-			require("gitsigns").setup()
-		end,
-	},
-}
diff --git a/.config/nvim/lua/plugins/harpoon.lua b/.config/nvim/lua/plugins/harpoon.lua
index a564707..57e6b7f 100644
--- a/.config/nvim/lua/plugins/harpoon.lua
+++ b/.config/nvim/lua/plugins/harpoon.lua
@@ -1 +1,94 @@
-return {}
+-- Contenido FINAL y LIMPIO para: lua/plugins/harpoon.lua
+return {
+    {
+        "ThePrimeagen/harpoon",
+        branch = "harpoon2", -- Mantener la branch correcta
+        dependencies = { "nvim-lua/plenary.nvim" },
+        -- Restaurar carga perezosa por teclas originales del usuario
+        keys = {
+            { "<leader>a", desc = "Harpoon: Add File" },
+            { "<leader>h", desc = "Harpoon: Toggle UI" },
+            { "<leader>1", desc = "Harpoon: Go To 1" },
+            { "<leader>2", desc = "Harpoon: Go To 2" },
+            { "<leader>3", desc = "Harpoon: Go To 3" },
+            { "<leader>4", desc = "Harpoon: Go To 4" },
+            { "<leader>5", desc = "Harpoon: Go To 5" },
+            { "<leader>6", desc = "Harpoon: Go To 6" },
+            { "<leader>7", desc = "Harpoon: Go To 7" },
+            { "<leader>8", desc = "Harpoon: Go To 8" },
+            { "<leader>9", desc = "Harpoon: Go To 9" },
+            { "<C-S-P>",   desc = "Harpoon: Previous" },
+            { "<C-S-N>",   desc = "Harpoon: Next" },
+        },
+        config = function()
+            -- Requerir harpoon aqu√≠
+            local harpoon = require("harpoon")
+
+            -- Llamada de configuraci√≥n requerida
+            harpoon:setup() -- Usando ':' como se confirm√≥ que funciona
+
+            -- Mapeos de teclado del usuario con la API corregida
+            local map = vim.keymap.set
+            -- Opciones comunes para los mapeos (noremap=true es default en lua)
+            local opts = { silent = true }
+
+            -- A√±adir archivo
+            map("n", "<leader>a", function()
+                -- Obtener objeto lista y llamar a su m√©todo :add
+                harpoon:list():add()
+            end, { desc = "Harpoon: Add File", silent = true }) -- A√±adido silent=true
+
+            -- Mostrar/ocultar men√∫ (con <C-h>)
+            map("n", "<leader>h", function()
+                -- Obtener objeto lista y pasarlo a toggle_quick_menu
+                harpoon.ui:toggle_quick_menu(harpoon:list())
+            end, { desc = "Harpoon: Toggle UI", silent = true }) -- A√±adido silent=true
+
+            -- Seleccionar archivos 1-9
+            map("n", "<leader>1", function()
+                harpoon:list():select(1)
+            end, { desc = "Harpoon: Go To 1", silent = true })
+
+            map("n", "<leader>2", function()
+                harpoon:list():select(2)
+            end, { desc = "Harpoon: Go To 2", silent = true })
+
+            map("n", "<leader>3", function()
+                harpoon:list():select(3)
+            end, { desc = "Harpoon: Go To 3", silent = true })
+
+            map("n", "<leader>4", function()
+                harpoon:list():select(4)
+            end, { desc = "Harpoon: Go To 4", silent = true })
+
+            map("n", "<leader>5", function()
+                harpoon:list():select(5)
+            end, { desc = "Harpoon: Go To 5", silent = true })
+
+            map("n", "<leader>6", function()
+                harpoon:list():select(6)
+            end, { desc = "Harpoon: Go To 6", silent = true })
+
+            map("n", "<leader>7", function()
+                harpoon:list():select(7)
+            end, { desc = "Harpoon: Go To 7", silent = true })
+
+            map("n", "<leader>8", function()
+                harpoon:list():select(8)
+            end, { desc = "Harpoon: Go To 8", silent = true })
+
+            map("n", "<leader>9", function()
+                harpoon:list():select(9)
+            end, { desc = "Harpoon: Go To 9", silent = true })
+
+            -- Navegar anterior/siguiente
+            map("n", "<C-S-P>", function()
+                harpoon:list():prev()
+            end, { desc = "Harpoon: Previous", silent = true })
+
+            map("n", "<C-S-N>", function()
+                harpoon:list():next()
+            end, { desc = "Harpoon: Next", silent = true })
+        end,
+    },
+}
diff --git a/.config/nvim/lua/plugins/lsp-config.lua b/.config/nvim/lua/plugins/lsp-config.lua
index d005675..938ba00 100644
--- a/.config/nvim/lua/plugins/lsp-config.lua
+++ b/.config/nvim/lua/plugins/lsp-config.lua
@@ -1,42 +1,42 @@
 return {
-	{
-		"williamboman/mason.nvim",
-		lazy = false,
-		config = function()
-			require("mason").setup()
-		end,
-	},
-	{
-		"williamboman/mason-lspconfig.nvim",
-		lazy = false,
-		opts = {
-			auto_install = true,
-		},
-	},
-	{
-		"neovim/nvim-lspconfig",
-		lazy = false,
-		config = function()
-			local capabilities = require("cmp_nvim_lsp").default_capabilities()
+    {
+        "williamboman/mason.nvim",
+        lazy = false,
+        config = function()
+            require("mason").setup()
+        end,
+    },
+    {
+        "williamboman/mason-lspconfig.nvim",
+        lazy = false,
+        opts = {
+            auto_install = true,
+        },
+    },
+    {
+        "neovim/nvim-lspconfig",
+        lazy = false,
+        config = function()
+            local capabilities = require("cmp_nvim_lsp").default_capabilities()
 
-			local lspconfig = require("lspconfig")
-			lspconfig.ts_ls.setup({
-				capabilities = capabilities,
-			})
-			lspconfig.solargraph.setup({
-				capabilities = capabilities,
-			})
-			lspconfig.html.setup({
-				capabilities = capabilities,
-			})
-			lspconfig.lua_ls.setup({
-				capabilities = capabilities,
-			})
+            local lspconfig = require("lspconfig")
+            lspconfig.ts_ls.setup({
+                capabilities = capabilities,
+            })
+            lspconfig.solargraph.setup({
+                capabilities = capabilities,
+            })
+            lspconfig.html.setup({
+                capabilities = capabilities,
+            })
+            lspconfig.lua_ls.setup({
+                capabilities = capabilities,
+            })
 
-			vim.keymap.set("n", "K", vim.lsp.buf.hover, {})
-			vim.keymap.set("n", "<leader>gd", vim.lsp.buf.definition, {})
-			vim.keymap.set("n", "<leader>gr", vim.lsp.buf.references, {})
-			vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, {})
-		end,
-	},
+            vim.keymap.set("n", "K", vim.lsp.buf.hover, {})
+            vim.keymap.set("n", "gd", vim.lsp.buf.definition, {})
+            vim.keymap.set("n", "gr", vim.lsp.buf.references, {})
+            vim.keymap.set("n", "ca", vim.lsp.buf.code_action, {})
+        end,
+    },
 }
diff --git a/.config/nvim/lua/plugins/lua-line.lua b/.config/nvim/lua/plugins/lua-line.lua
index 3941af5..41b3a35 100644
--- a/.config/nvim/lua/plugins/lua-line.lua
+++ b/.config/nvim/lua/plugins/lua-line.lua
@@ -1 +1,29 @@
-return {}
\ No newline at end of file
+-- lua/plugins/lualine.lua
+return {
+  {
+    "nvim-lualine/lualine.nvim",
+    -- Aseg√∫rate que devicons se cargue, lazy.nvim suele manejarlo bien
+    dependencies = { "nvim-tree/nvim-web-devicons" },
+    event = "VeryLazy", -- Cargarla cuando la UI est√© lista
+    config = function()
+      require("lualine").setup({
+        options = {
+          theme = "auto", -- Usa el tema de colorscheme o elige uno espec√≠fico
+          section_separators = { left = "ÓÇ¥", right = "ÓÇ∂" },
+          component_separators = { left = "ÓÇµ", right = "ÓÇ∑" },
+          icons_enabled = true,
+          -- ... otras opciones globales si las necesitas ...
+        },
+        sections = {
+          lualine_a = { "mode" },
+          lualine_b = { "branch", "diff" },
+          lualine_c = { { "filename", path = 1 }, { "diagnostics", sources = { "nvim_lsp" } } },
+          lualine_x = { "filetype", "encoding", "fileformat" },
+          lualine_y = { "progress" },
+          lualine_z = { "location" },
+        },
+        -- ... otras secciones o configuraciones ...
+      })
+    end,
+  },
+}
diff --git a/.config/nvim/lua/plugins/neo-tree.lua b/.config/nvim/lua/plugins/neo-tree.lua
index 904ce46..5197bd8 100644
--- a/.config/nvim/lua/plugins/neo-tree.lua
+++ b/.config/nvim/lua/plugins/neo-tree.lua
@@ -7,7 +7,7 @@ return {
 		"MunifTanjim/nui.nvim",
 	},
 	config = function()
-		vim.keymap.set("n", "<C-n>", ":Neotree filesystem reveal left<CR>", {})
+        vim.keymap.set("n","<leader>pv", ":Neotree toggle<CR>",{})
 		vim.keymap.set("n", "<leader>bf", ":Neotree buffers reveal float<CR>", {})
 	end,
 }
diff --git a/.config/nvim/lua/plugins/none-ls.lua b/.config/nvim/lua/plugins/none-ls.lua
index b005f92..479779e 100644
--- a/.config/nvim/lua/plugins/none-ls.lua
+++ b/.config/nvim/lua/plugins/none-ls.lua
@@ -1,17 +1,21 @@
+-- Archivo: lua/plugins/none-ls.lua
 return {
-	"nvimtools/none-ls.nvim",
-	config = function()
-		local null_ls = require("null-ls")
-		null_ls.setup({
-			sources = {
-				null_ls.builtins.formatting.stylua,
-				null_ls.builtins.formatting.prettier,
-				null_ls.builtins.diagnostics.erb_lint,
-				null_ls.builtins.diagnostics.rubocop,
-				null_ls.builtins.formatting.rubocop,
-			},
-		})
+    "nvimtools/none-ls.nvim",
+    config = function()
+        local null_ls = require("null-ls")
+        null_ls.setup({
+            -- A√±ade un retraso (ej. 250ms) antes de ejecutar fuentes tras un cambio
+            debounce = 250, -- Puedes ajustar este valor
 
-		vim.keymap.set("n", "<leader>gf", vim.lsp.buf.format, {})
-	end,
+            sources = {
+                null_ls.builtins.formatting.stylua,
+                null_ls.builtins.formatting.prettier,
+                null_ls.builtins.diagnostics.erb_lint,
+                null_ls.builtins.diagnostics.rubocop,
+                null_ls.builtins.formatting.rubocop,
+            },
+        })
+
+        vim.keymap.set("n", "<leader>ff", vim.lsp.buf.format, {})
+    end,
 }
diff --git a/.config/nvim/lua/plugins/telescope.lua b/.config/nvim/lua/plugins/telescope.lua
index 0828bd6..c6a69e1 100644
--- a/.config/nvim/lua/plugins/telescope.lua
+++ b/.config/nvim/lua/plugins/telescope.lua
@@ -1,25 +1,34 @@
 return {
-	{
-		"nvim-telescope/telescope-ui-select.nvim",
-	},
-	{
-		"nvim-telescope/telescope.nvim",
-		tag = "0.1.5",
-		dependencies = { "nvim-lua/plenary.nvim" },
-		config = function()
-			require("telescope").setup({
-				extensions = {
-					["ui-select"] = {
-						require("telescope.themes").get_dropdown({}),
-					},
-				},
-			})
-			local builtin = require("telescope.builtin")
-			vim.keymap.set("n", "<leader>pf", builtin.find_files, {})
-			vim.keymap.set("n", "<leader>pg", builtin.live_grep, {})
-			vim.keymap.set("n", "<leader><leader>", builtin.oldfiles, {})
+    {
+        "nvim-telescope/telescope-ui-select.nvim",
+    },
+    {
+        "nvim-telescope/telescope-file-browser.nvim",
+        -- Carga cuando telescope cargue
+        dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" },
+        config = function()
+            -- Configuraci√≥n espec√≠fica de file_browser si es necesaria
+            -- require("telescope").load_extension("file_browser")
+        end,
+    },
+    {
+        "nvim-telescope/telescope.nvim",
+        tag = "0.1.5",
+        dependencies = { "nvim-lua/plenary.nvim" },
+        config = function()
+            require("telescope").setup({
+                extensions = {
+                    ["ui-select"] = {
+                        require("telescope.themes").get_dropdown({}),
+                    },
+                },
+            })
+            local builtin = require("telescope.builtin")
+            vim.keymap.set("n", "<leader>pf", builtin.find_files, {})
+            vim.keymap.set("n", "<leader>pg", builtin.live_grep, {})
+            vim.keymap.set("n", "<leader><leader>", builtin.oldfiles, {})
 
-			require("telescope").load_extension("ui-select")
-		end,
-	},
+            require("telescope").load_extension("ui-select")
+        end,
+    },
 }
diff --git a/.config/nvim/lua/plugins/terminal.lua b/.config/nvim/lua/plugins/terminal.lua
index 3941af5..e3930c6 100644
--- a/.config/nvim/lua/plugins/terminal.lua
+++ b/.config/nvim/lua/plugins/terminal.lua
@@ -1 +1,55 @@
-return {}
\ No newline at end of file
+return {
+  {
+    "akinsho/toggleterm.nvim",
+    version = "*", -- Puedes especificar una versi√≥n o tag si lo prefieres
+    -- Carga perezosa: Se carga cuando se ejecuta el comando :ToggleTerm
+    -- o cuando se usa uno de los atajos definidos en 'keys'.
+    cmd = "ToggleTerm",
+    keys = {
+      -- Atajos que activar√°n la carga del plugin si a√∫n no est√° cargado
+      { "<leader>th", "<cmd>ToggleTerm direction=horizontal<CR>", desc = "ToggleTerm (Horizontal)" },
+      { "<leader>tv", "<cmd>ToggleTerm direction=vertical<CR>", desc = "ToggleTerm (Vertical)" },
+      { "<leader>tt", "<cmd>ToggleTerm direction=tab<CR>", desc = "ToggleTerm (Tab)" },
+    },
+    config = function()
+      -- Aqu√≠ va toda tu configuraci√≥n de setup original
+      require("toggleterm").setup({
+        size = function(term)
+          if term.direction == "horizontal" then
+            return vim.o.lines * 0.6
+          elseif term.direction == "vertical" then
+            return vim.o.columns * 0.6
+          end
+        end,
+        -- open_mapping = [[<leader>t]], -- Comentado, ya manejado por 'keys' de lazy.nvim
+        hide_numbers = true,
+        shade_filetypes = {},
+        shade_terminals = true,
+        shading_factor = 2,
+        start_in_insert = true,
+        insert_mappings = true, -- Mantenlo si quieres los mapeos por defecto en modo inserci√≥n
+        terminal_mappings = true, -- Mantenlo si quieres los mapeos por defecto en modo terminal
+        persist_size = true,
+        direction = "float", -- default
+        float_opts = {
+          border = "curved",
+          winblend = 3,
+        },
+      })
+
+      -- Atajos / Mapeos adicionales que se deben definir DESPU√âS del setup.
+      -- El mapeo para <Esc> en modo terminal es un buen ejemplo.
+      local opts_silent = { silent = true } -- noremap=true es el valor por defecto para vim.keymap.set
+
+      -- Esc para salir de modo terminal (t)
+      vim.keymap.set("t", "<Esc>", "<C-\\><C-n>", opts_silent)
+
+      -- Si NO hubieras usado la tabla 'keys' de lazy.nvim para los atajos principales,
+      -- los definir√≠as aqu√≠ tambi√©n:
+      -- vim.keymap.set("n", "<leader>t", "<cmd>ToggleTerm<CR>", opts_silent)
+      -- vim.keymap.set("n", "<leader>th", "<cmd>ToggleTerm direction=horizontal<CR>", opts_silent)
+      -- vim.keymap.set("n", "<leader>tv", "<cmd>ToggleTerm direction=vertical<CR>", opts_silent)
+      -- vim.keymap.set("n", "<leader>tt", "<cmd>ToggleTerm direction=tab<CR>", opts_silent)
+    end,
+  },
+}
diff --git a/.config/nvim/lua/plugins/treesitter.lua b/.config/nvim/lua/plugins/treesitter.lua
index d722213..8ccdfe3 100644
--- a/.config/nvim/lua/plugins/treesitter.lua
+++ b/.config/nvim/lua/plugins/treesitter.lua
@@ -1,14 +1,14 @@
 return {
-	{
-		"nvim-treesitter/nvim-treesitter",
-		build = ":TSUpdate",
-		config = function()
-			local config = require("nvim-treesitter.configs")
-			config.setup({
-				auto_install = true,
-				highlight = { enable = true },
-				indent = { enable = true },
-			})
-		end,
-	},
+    {
+        "nvim-treesitter/nvim-treesitter",
+        build = ":TSUpdate",
+        config = function()
+            local config = require("nvim-treesitter.configs")
+            config.setup({
+                auto_install = true,
+                highlight = { enable = true },
+                indent = { enable = true },
+            })
+        end,
+    },
 }
diff --git a/.config/nvim/lua/plugins/undotree.lua b/.config/nvim/lua/plugins/undotree.lua
index 3941af5..cb1c35a 100644
--- a/.config/nvim/lua/plugins/undotree.lua
+++ b/.config/nvim/lua/plugins/undotree.lua
@@ -1 +1,24 @@
-return {}
\ No newline at end of file
+-- Contenido para: lua/plugins/undotree.lua
+return {
+  {
+    "mbbill/undotree",
+    -- Carga perezosa: El plugin se cargar√° la primera vez que
+    -- se ejecute el comando :UndotreeToggle (ya sea manualmente
+    -- o a trav√©s del atajo de teclado).
+    cmd = "UndotreeToggle",
+    config = function()
+      -- Tu atajo de teclado para mostrar/ocultar undotree
+      vim.keymap.set("n", "<leader>u", ":UndotreeToggle<CR>", {
+        desc = "Toggle Undotree", -- Descripci√≥n opcional para which-key u otros
+        noremap = true,
+        silent = true
+      })
+
+      -- (Opcional) Puedes configurar variables globales de undotree aqu√≠ si lo necesitas
+      -- Ejemplo: vim.g.undotree_WindowLayout = 2 -- Cambia la disposici√≥n de la ventana
+      -- Ejemplo: vim.g.undotree_SetFocusWhenToggle = 1 -- Pone el foco en la ventana de undotree al abrirla
+    end,
+    -- No necesitamos la tabla 'keys' expl√≠citamente aqu√≠ porque 'cmd' ya maneja
+    -- la carga perezosa cuando se invoca el comando desde el keymap.
+  }
+}
diff --git a/.config/nvim/lua/plugins/vim-test.lua b/.config/nvim/lua/plugins/vim-test.lua
index 3142ac6..f5da78e 100644
--- a/.config/nvim/lua/plugins/vim-test.lua
+++ b/.config/nvim/lua/plugins/vim-test.lua
@@ -4,11 +4,11 @@ return {
 		"preservim/vimux",
 	},
 	config = function()
-		vim.keymap.set("n", "<leader>t", ":TestNearest<CR>", {})
-		vim.keymap.set("n", "<leader>T", ":TestFile<CR>", {})
-		vim.keymap.set("n", "<leader>a", ":TestSuite<CR>", {})
-		vim.keymap.set("n", "<leader>l", ":TestLast<CR>", {})
-		vim.keymap.set("n", "<leader>g", ":TestVisit<CR>", {})
+		vim.keymap.set("n", "<leader>T", ":TestNearest<CR>", {})
+		vim.keymap.set("n", "<leader>Tf", ":TestFile<CR>", {})
+		vim.keymap.set("n", "<leader>Ta", ":TestSuite<CR>", {})
+		vim.keymap.set("n", "<leader>Tl", ":TestLast<CR>", {})
+		vim.keymap.set("n", "<leader>Tg", ":TestVisit<CR>", {})
 		vim.cmd("let test#strategy = 'vimux'")
 	end,
 }
diff --git a/.config/nvim/lua/vim-options.lua b/.config/nvim/lua/vim-options.lua
index 841ff91..38b297a 100644
--- a/.config/nvim/lua/vim-options.lua
+++ b/.config/nvim/lua/vim-options.lua
@@ -20,6 +20,4 @@ vim.keymap.set("n", "<c-k>", ":wincmd k<CR>")
 vim.keymap.set("n", "<c-j>", ":wincmd j<CR>")
 vim.keymap.set("n", "<c-h>", ":wincmd h<CR>")
 vim.keymap.set("n", "<c-l>", ":wincmd l<CR>")
-
-vim.keymap.set("n", "<leader>h", ":nohlsearch<CR>")
 vim.wo.number = true
